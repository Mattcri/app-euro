// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend_api.Context;

#nullable disable

namespace backend_api.Migrations
{
    [DbContext(typeof(dbEuroContext))]
    [Migration("20240613091840_SeedDatabaseWithInitData")]
    partial class SeedDatabaseWithInitData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend_api.Models.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("DATE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderSex")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("VARCHAR(11)");

                    b.HasKey("AuthorId");

                    b.ToTable("Autor", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("2afe10ff-ae64-4344-9cf8-4e787188e4d6"),
                            City = "Londres",
                            DateOfBirth = new DateTime(1894, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aldous@gmail.com",
                            GenderSex = 0,
                            Name = "Aldous Huxley",
                            Rut = "19220247-7"
                        },
                        new
                        {
                            AuthorId = new Guid("71064522-0fb7-478b-853d-c589a49dbdd2"),
                            City = "Santiago",
                            DateOfBirth = new DateTime(1942, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "iallende@gmail.com",
                            GenderSex = 1,
                            Name = "Isabel Allende",
                            Rut = "13371020-5"
                        });
                });

            modelBuilder.Entity("backend_api.Models.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GenderBook")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("NumPages")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Libro", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = new Guid("08259855-554d-4d8f-a51c-32fb8c7dc3a2"),
                            AuthorId = new Guid("2afe10ff-ae64-4344-9cf8-4e787188e4d6"),
                            GenderBook = "Ficción distópica",
                            NumPages = 275,
                            Title = "Un mundo feliz",
                            Year = 1982
                        },
                        new
                        {
                            BookId = new Guid("dddfec9d-cd41-4c61-98d6-ba6d98cfa0df"),
                            AuthorId = new Guid("71064522-0fb7-478b-853d-c589a49dbdd2"),
                            GenderBook = "Realismo mágico",
                            NumPages = 464,
                            Title = "La casa de los espíritus",
                            Year = 1932
                        });
                });

            modelBuilder.Entity("backend_api.Models.Book", b =>
                {
                    b.HasOne("backend_api.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("backend_api.Models.Author", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
